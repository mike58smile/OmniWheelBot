<VisualMicro>
  <Program Name="Driver" Ext=".ino" Location="C:\Users\xmisko06\Documents\GitHub\Bakalarka_robot\CodeReworking\Driver">
    <Compile IsDebugStart="1" IsGdb="0" CompilerErrors="0" ConfigurationName="Debug" UseConfigurationNameInBuildFolder="True" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" ExportWebDebugger="0" ReCompileIfSourceIsNewer="0" BuildPath="C:\Users\xmisko06\AppData\Local\Temp\VMBuilds\Driver\nano_atmega328old\Debug" SketchName="Driver" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DBT_HARDWARESERIAL 0;VM_DBT_SOFTWARESERIAL 1;VM_DBT_FASTSERIAL 2;VM_DBT_USB 3;VM_DBT_TEENSY 4;VM_DBT_UART 5;VM_DBT_USART 6;VM_DBT_USBSERIAL 7;VM_DBT_TTYUART 8;VM_DBT_NET_CONSOLE 9;VM_DBT_Uart 10;VM_DBT_COSA 11;VM_DBT_CDCSerialClass 12;VM_DBT_HARDWARESERIAL1 13;VM_DBT_HARDWARESERIAL2 14;VM_DBT_HARDWARESERIAL3 15;VM_DBT_NET_UDP 16;VM_DBT_USBAPI 17;VM_DBT_SERIALUSB 18;VM_DBT_MS430_SERIAL_ 19;VM_DBT_NO_SERIAL 20;VM_DBT_GENERIC_OBJECT 21;VM_DEBUG_ENABLE 1;VM_DEBUG;VM_DEBUG_BANDWIDTH_THROTTLE_MS 33;VM_DEBUGGER_SOFT_TRANSPORT Serial;VM_DEBUGGER_SOFT_TRANSPORT_WRITER Serial;VM_DBT VM_DBT_GENERIC_OBJECT;" IncludesDebug="1" IsCompiled="1" />
    <Platform Package="arduino" Platform="avr" Name="arduino20x" Architecture="7.3.0-atmel3.6.1-arduino7">
      <Board CoreFolder="C:\Users\xmisko06\AppData\Local\Arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino" VariantFullPath="C:\Users\xmisko06\AppData\Local\Arduino15\packages\arduino\hardware\avr\1.8.6\variants\eightanaloginputs" McuIdePath="c:\program files\microsoft visual studio\2022\enterprise\common7\ide\extensions\lurodfxk.kwv\Micro Platforms\visualmicro\ide" McuSketchBookPath="C:\Users\xmisko06\Documents\Arduino" name="ATmega328P (Old Bootloader) (Arduino Nano)" upload_port.0.board="nano" upload.tool="avrdude" upload.tool.default="avrdude" upload.tool.network="arduino_ota" upload.protocol="arduino" bootloader.tool="avrdude" bootloader.tool.default="avrdude" bootloader.unlock_bits="0x3F" bootloader.lock_bits="0x0F" build.f_cpu="16000000L" build.board="AVR_NANO" build.core="arduino" build.variant="eightanaloginputs" menu.cpu.atmega328="ATmega328P" menu.cpu.atmega328.upload.maximum_size="30720" menu.cpu.atmega328.upload.maximum_data_size="2048" menu.cpu.atmega328.upload.speed="115200" menu.cpu.atmega328.bootloader.low_fuses="0xFF" menu.cpu.atmega328.bootloader.high_fuses="0xDA" menu.cpu.atmega328.bootloader.extended_fuses="0xFD" menu.cpu.atmega328.bootloader.file="optiboot/optiboot_atmega328.hex" menu.cpu.atmega328.build.mcu="atmega328p" menu.cpu.atmega328old="ATmega328P (Old Bootloader)" menu.cpu.atmega328old.upload.maximum_size="30720" menu.cpu.atmega328old.upload.maximum_data_size="2048" menu.cpu.atmega328old.upload.speed="57600" menu.cpu.atmega328old.bootloader.low_fuses="0xFF" menu.cpu.atmega328old.bootloader.high_fuses="0xDA" menu.cpu.atmega328old.bootloader.extended_fuses="0xFD" menu.cpu.atmega328old.bootloader.file="atmega/ATmegaBOOT_168_atmega328.hex" menu.cpu.atmega328old.build.mcu="atmega328p" menu.cpu.atmega168="ATmega168" menu.cpu.atmega168.upload.maximum_size="14336" menu.cpu.atmega168.upload.maximum_data_size="1024" menu.cpu.atmega168.upload.speed="19200" menu.cpu.atmega168.bootloader.low_fuses="0xff" menu.cpu.atmega168.bootloader.high_fuses="0xdd" menu.cpu.atmega168.bootloader.extended_fuses="0xF8" menu.cpu.atmega168.bootloader.file="atmega/ATmegaBOOT_168_diecimila.hex" menu.cpu.atmega168.build.mcu="atmega168" runtime.ide.path="c:\program files\microsoft visual studio\2022\enterprise\common7\ide\extensions\lurodfxk.kwv\Micro Platforms\visualmicro\ide" runtime.os="windows" build.system.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\arduino\hardware\avr\1.8.6\system" runtime.ide.version="108010" target_package="arduino" target_platform="avr" runtime.hardware.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\arduino\hardware\avr" originalid="nano" _id="nano" intellisense.tools.path="{runtime.tools.avr-gcc.path}\" intellisense.include.paths="{intellisense.tools.path}\lib\gcc\avr\7.3.0\include;{intellisense.tools.path}avr\include;{intellisense.tools.path}\lib\gcc\avr\7.3.0\include;{intellisense.tools.path}avr\include-fixed;{intellisense.tools.path}avr\include\avr;{intellisense.tools.path}lib\gcc\avr\4.8.1\include;{intellisense.tools.path}lib\gcc\avr\4.9.2\include;{intellisense.tools.path}lib\gcc\avr\4.9.3\include;{vm.intellisense.add-paths}" tools.atprogram.cmd.path="%AVRSTUDIO_EXE_PATH%\atbackend\atprogram" tools.atprogram.cmd.setwinpath="true" tools.atprogram.program.params.verbose="-v" tools.atprogram.program.params.quiet="-q" tools.atprogram.program.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.program.xpattern="&quot;{cmd.path}&quot; {AVRSTUDIO_BACKEND_CONNECTION} -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.erase.params.verbose="-v" tools.atprogram.erase.params.quiet="-q" tools.atprogram.bootloader.params.verbose="-v" tools.atprogram.bootloader.params.quiet="-q" tools.atprogram.bootloader.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {bootloader.verbose}  program -c -f &quot;{runtime.ide.path}\hardware\arduino\avr\bootloaders\{bootloader.file}&quot;" ide.compiler_flags_no_opt="-Og" tools.gdbstub.cmd="avr-gdb.exe" tools.gdbstub.path="{runtime.tools.avr-gcc.path}/bin" tools.gdbstub.alternative.path="Micro Platforms/visualmicro/tools/avr-gdb/7.3.0-atmel3.6.1-arduino5" tools.gdbstub.debug.args="-b 115200" tools.gdbstub.debug.address="\\.\{serial.debug.port}" tools.gdbstub.showLocalSerialPort="true" debug_menu.hwdebugger.gdbstub="GDB Stub" debug_menu.hwdebugger.gdbstub.debug.tool="gdbstub" meta_gdbstub.sentence="This debugger requires the avr-debugger library (by Jan Dolinay) be included in the project (install via Library Manager or from GitHub)." meta_gdbstub.comment="To use this debugger, install 'avr-debugger' library, add 1) '#include &lt;avr8-stub.h&gt;'  2) add 'debug_init();' to the 'setup()', and add 'breakpoint();' to the top of 'loop()'. Set vMicro &gt; Debugger &gt; 'Compiler Optimization' to 'No Project', 'No Project + Libraries' or 'None' when debugging (NOTE: This might cause compilation errors with certain code such as HardwareSerial.)" meta_gdbstub.image.connect="https://www.visualmicro.com/pics/Debug-Help-Uno_USBOnly.png" meta_gdbstub.image.operation="https://www.visualmicro.com/pics/Debug-Break-Uno-GDBStub-VSOnly.png" meta_gdbstub.reference.usage.url="https://www.visualmicro.com/page/User-Guide.aspx?doc=Arduino-gdb-Tutorial.html" version="1.8.6" compiler.warning_flags="-w" compiler.warning_flags.none="-w" compiler.warning_flags.default="" compiler.warning_flags.more="-Wall" compiler.warning_flags.all="-Wall -Wextra" compiler.path="{runtime.tools.avr-gcc.path}/bin/" compiler.c.cmd="avr-gcc" compiler.c.flags="-c -g -Os {compiler.warning_flags} -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects" compiler.c.elf.flags="{compiler.warning_flags} -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections" compiler.c.elf.cmd="avr-gcc" compiler.S.flags="-c -g -x assembler-with-cpp -flto -MMD" compiler.cpp.cmd="avr-g++" compiler.cpp.flags="-c -g -Os {compiler.warning_flags} -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto" compiler.ar.cmd="avr-gcc-ar" compiler.ar.flags="rcs" compiler.objcopy.cmd="avr-objcopy" compiler.objcopy.eep.flags="-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0" compiler.elf2hex.flags="-O ihex -R .eeprom" compiler.elf2hex.cmd="avr-objcopy" compiler.ldflags="" compiler.libraries.ldflags="" compiler.size.cmd="avr-size" build.extra_flags="" compiler.c.extra_flags="" compiler.c.elf.extra_flags="" compiler.S.extra_flags="" compiler.cpp.extra_flags="" compiler.ar.extra_flags="" compiler.objcopy.eep.extra_flags="" compiler.elf2hex.extra_flags="" recipe.c.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.c.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.S.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.S.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" archive_file_path="{build.path}/{archive_file}" recipe.ar.pattern="&quot;{compiler.path}{compiler.ar.cmd}&quot; {compiler.ar.flags} {compiler.ar.extra_flags} &quot;{archive_file_path}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{compiler.c.elf.cmd}&quot; {compiler.c.elf.flags} -mmcu={build.mcu} {compiler.c.elf.extra_flags} {compiler.ldflags} -o &quot;{build.path}/{build.project_name}.elf&quot; {object_files} {compiler.libraries.ldflags} &quot;{build.path}/{archive_file}&quot; &quot;-L{build.path}&quot; -lm" recipe.objcopy.eep.pattern="&quot;{compiler.path}{compiler.objcopy.cmd}&quot; {compiler.objcopy.eep.flags} {compiler.objcopy.eep.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.eep&quot;" recipe.objcopy.hex.pattern="&quot;{compiler.path}{compiler.elf2hex.cmd}&quot; {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.hex&quot;" recipe.output.tmp_file="{build.project_name}.hex" recipe.output.save_file="{build.project_name}.{build.variant}.hex" recipe.size.pattern="&quot;{compiler.path}{compiler.size.cmd}&quot; -A &quot;{build.path}/{build.project_name}.elf&quot;" recipe.size.regex="^(?:\.text|\.data|\.bootloader)\s+([0-9]+).*" recipe.size.regex.data="^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*" recipe.size.regex.eeprom="^(?:\.eeprom)\s+([0-9]+).*" preproc.includes.flags="-w -x c++ -M -MG -MP" recipe.preproc.includes="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} {preproc.includes.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot;" preproc.macros.flags="-w -x c++ -E -CC" recipe.preproc.macros="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} {preproc.macros.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{preprocessed_file_path}&quot;" pluggable_discovery.required.0="builtin:serial-discovery" pluggable_discovery.required.1="builtin:mdns-discovery" pluggable_monitor.required.serial="builtin:serial-monitor" tools.avrdude.path="{runtime.tools.avrdude.path}" tools.avrdude.cmd.path="{path}/bin/avrdude" tools.avrdude.config.path="{path}/etc/avrdude.conf" tools.avrdude.upload.params.verbose="-v" tools.avrdude.upload.params.quiet="-q -q" tools.avrdude.upload.verify="" tools.avrdude.upload.params.noverify="-V" tools.avrdude.upload.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {upload.verbose} {upload.verify} -p{build.mcu} -c{upload.protocol} &quot;-P{serial.port}&quot; -b{upload.speed} -D &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.program.params.verbose="-v" tools.avrdude.program.params.quiet="-q -q" tools.avrdude.program.verify="" tools.avrdude.program.params.noverify="-V" tools.avrdude.program.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {program.verbose} {program.verify} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.erase.params.verbose="-v" tools.avrdude.erase.params.quiet="-q -q" tools.avrdude.erase.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {erase.verbose} -p{build.mcu} -c{protocol} {program.extra_params} -e -Ulock:w:{bootloader.unlock_bits}:m -Uefuse:w:{bootloader.extended_fuses}:m -Uhfuse:w:{bootloader.high_fuses}:m -Ulfuse:w:{bootloader.low_fuses}:m" tools.avrdude.bootloader.params.verbose="-v" tools.avrdude.bootloader.params.quiet="-q -q" tools.avrdude.bootloader.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {bootloader.verbose} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{runtime.platform.path}/bootloaders/{bootloader.file}:i&quot; -Ulock:w:{bootloader.lock_bits}:m" tools.avrdude_remote.upload.pattern="/usr/bin/run-avrdude /tmp/sketch.hex {upload.verbose} -p{build.mcu}" tools.avrdude.network_cmd="{runtime.tools.arduinoOTA.path}/bin/arduinoOTA" tools.avrdude.upload.network_pattern="&quot;{network_cmd}&quot; -address {serial.port} -port {upload.network.port} -sketch &quot;{build.path}/{build.project_name}.hex&quot; -upload {upload.network.endpoint_upload} -sync {upload.network.endpoint_sync} -reset {upload.network.endpoint_reset} -sync_exp {upload.network.sync_return}" tools.arduino_ota.cmd="{runtime.tools.arduinoOTA.path}/bin/arduinoOTA" tools.arduino_ota.upload.pattern="&quot;{cmd}&quot; -address {upload.port.address} -port {upload.port.properties.port} -sketch &quot;{build.path}/{build.project_name}.hex&quot; -upload {upload.port.properties.endpoint_upload} -sync {upload.port.properties.endpoint_sync} -reset {upload.port.properties.endpoint_reset} -sync_exp {upload.port.properties.sync_return}" build.usb_manufacturer="&quot;Unknown&quot;" build.usb_flags="-DUSB_VID={build.vid} -DUSB_PID={build.pid} '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'" vm_original_platform_name="Arduino AVR Boards" vm.platform.root.path="c:\program files\microsoft visual studio\2022\enterprise\common7\ide\extensions\lurodfxk.kwv\Micro Platforms\arduino16x" avrisp.name="AVR ISP" avrisp.communication="serial" avrisp.protocol="stk500v1" avrisp.program.protocol="stk500v1" avrisp.program.tool="avrdude" avrisp.program.tool.default="avrdude" avrisp.program.extra_params="-P{serial.port}" avrispmkii.name="AVRISP mkII" avrispmkii.communication="usb" avrispmkii.protocol="stk500v2" avrispmkii.program.protocol="stk500v2" avrispmkii.program.tool="avrdude" avrispmkii.program.tool.default="avrdude" avrispmkii.program.extra_params="-Pusb" usbtinyisp.name="USBtinyISP" usbtinyisp.protocol="usbtiny" usbtinyisp.program.tool="avrdude" usbtinyisp.program.tool.default="avrdude" usbtinyisp.program.extra_params="" arduinoisp.name="ArduinoISP" arduinoisp.protocol="arduinoisp" arduinoisp.program.tool="avrdude" arduinoisp.program.tool.default="avrdude" arduinoisp.program.extra_params="" arduinoisporg.name="ArduinoISP.org" arduinoisporg.protocol="arduinoisporg" arduinoisporg.program.tool="avrdude" arduinoisporg.program.tool.default="avrdude" arduinoisporg.program.extra_params="" usbasp.name="USBasp" usbasp.communication="usb" usbasp.protocol="usbasp" usbasp.program.protocol="usbasp" usbasp.program.tool="avrdude" usbasp.program.tool.default="avrdude" usbasp.program.extra_params="-Pusb" parallel.name="Parallel Programmer" parallel.protocol="dapa" parallel.force="true" parallel.program.tool="avrdude" parallel.program.tool.default="avrdude" parallel.program.extra_params="-F" arduinoasisp.name="Arduino as ISP" arduinoasisp.communication="serial" arduinoasisp.protocol="stk500v1" arduinoasisp.speed="19200" arduinoasisp.program.protocol="stk500v1" arduinoasisp.program.speed="19200" arduinoasisp.program.tool="avrdude" arduinoasisp.program.tool.default="avrdude" arduinoasisp.program.extra_params="-P{serial.port} -b{program.speed}" arduinoasispatmega32u4.name="Arduino as ISP (ATmega32U4)" arduinoasispatmega32u4.communication="serial" arduinoasispatmega32u4.protocol="arduino" arduinoasispatmega32u4.speed="19200" arduinoasispatmega32u4.program.protocol="arduino" arduinoasispatmega32u4.program.speed="19200" arduinoasispatmega32u4.program.tool="avrdude" arduinoasispatmega32u4.program.tool.default="avrdude" arduinoasispatmega32u4.program.extra_params="-P{serial.port} -b{program.speed}" usbGemma.name="Arduino Gemma" usbGemma.protocol="arduinogemma" usbGemma.program.tool="avrdude" usbGemma.program.tool.default="avrdude" usbGemma.program.extra_params="" usbGemma.config.path="{runtime.platform.path}/bootloaders/gemma/avrdude.conf" buspirate.name="BusPirate as ISP" buspirate.communication="serial" buspirate.protocol="buspirate" buspirate.program.protocol="buspirate" buspirate.program.tool="avrdude" buspirate.program.tool.default="avrdude" buspirate.program.extra_params="-P{serial.port}" stk500.name="Atmel STK500 development board" stk500.communication="serial" stk500.protocol="stk500" stk500.program.protocol="stk500" stk500.program.tool="avrdude" stk500.program.tool.default="avrdude" stk500.program.extra_params="-P{serial.port}" jtag3isp.name="Atmel JTAGICE3 (ISP mode)" jtag3isp.communication="usb" jtag3isp.protocol="jtag3isp" jtag3isp.program.protocol="jtag3isp" jtag3isp.program.tool="avrdude" jtag3isp.program.tool.default="avrdude" jtag3isp.program.extra_params="" jtag3.name="Atmel JTAGICE3 (JTAG mode)" jtag3.communication="usb" jtag3.protocol="jtag3" jtag3.program.protocol="jtag3" jtag3.program.tool="avrdude" jtag3.program.tool.default="avrdude" jtag3.program.extra_params="-B0.1" atmel_ice.name="Atmel-ICE (AVR)" atmel_ice.communication="usb" atmel_ice.protocol="atmelice_isp" atmel_ice.program.protocol="atmelice_isp" atmel_ice.program.tool="avrdude" atmel_ice.program.tool.default="avrdude" atmel_ice.program.extra_params="-Pusb" upload.verify="" tools.vmopenocd.cmd="bin/openocd.exe" tools.vmopenocd.cmd.windows="bin/openocd.exe" tools.vmopenocd.debug.params.verbose="-d2" tools.vmopenocd.debug.params.quiet="-d0" tools.vmopenocd.debug.address="localhost:3333" tools.vmopenocd.path="{runtime.tools.openocd-0.10.0.20200213.path}" tools.vmopenocd.scriptPath="-s &quot;{path}/scripts/&quot;" tools.vmopenocd.logging="-l &quot;{{build.path}/{build.project_name}_DebugOpenOCD.log}&quot;" tools.vmopenocd.boardCmd="" tools.vmopenocd.targetCmd="" tools.vmopenocd.initCmd="" tools.vmopenocd.debug.pattern="&quot;{path}/{cmd}&quot; {debug.verbose} {logging} {scriptPath} {boardCmd} {targetCmd} {initCmd}" tools.vmopenocd.program.cmd="bin/openocd.exe" tools.vmopenocd.program.cmd.windows="bin/openocd.exe" tools.vmopenocd.program.path="{runtime.tools.openocd-0.10.0.20200213.path}" tools.vmopenocd.program.address="localhost:3333" tools.vmopenocd.program.params.verbose="-d2" tools.vmopenocd.program.params.quiet="-d0" tools.vmopenocd.program.elf.message="****[vMicro]**** Uploading ELF :" tools.vmopenocd.program.pattern="&quot;{path}/{cmd}&quot; {program.verbose} {scriptPath} {boardCmd} {targetCmd} -c &quot;echo -n {{program.elf.message}}&quot; {programCmd}" tools.atmelICE.protocol="" tools.atmelICE.debug.cmd="arm-none-eabi-gdb.exe" tools.atmelICE.debug.path="{runtime.tools.arm-none-eabi-gcc.path}/bin" tools.atmelICE.debug.pattern="&quot;{path}/{cmd}&quot;" tools.atmelICE.vmserver.initCmd="-c &quot;init; reset halt&quot;" vs-cmd.Debug.AttachtoProcess.tools.atmelICE.vmserver.initCmd="-c &quot;init&quot;" tools.atmelICE.vmserver.boardCmd="-c &quot;adapter driver cmsis-dap&quot; -c &quot;cmsis_dap_vid_pid 0x03eb 0x2141&quot;" tools.atmelICE.vmserver.tool="vmopenocd" tools.atmelICE.debug.server="vmopenocd" tools.atmelICE.program.scriptPath="-s &quot;{program.path}/scripts/&quot;" tools.atmelICE.program.boardCmd="-c &quot;adapter driver cmsis-dap&quot; -c &quot;cmsis_dap_vid_pid 0x03eb 0x2141&quot;" tools.atmelICE.program.cmd="bin/openocd.exe" tools.atmelICE.program.cmd.windows="bin/openocd.exe" tools.atmelICE.program.path="{runtime.tools.openocd-0.10.0.20200213.path}" tools.atmelICE.program.address="localhost:3333" tools.atmelICE.program.params.verbose="-d2" tools.atmelICE.program.params.quiet="-d0" tools.atmelICE.program.elf.message="****[vMicro]**** Uploading ELF :" tools.atmelICE.program.pattern="&quot;{program.path}/{program.cmd}&quot; {program.verbose} {program.scriptPath} {program.boardCmd} {program.targetCmd} -c &quot;echo -n {{program.elf.message}}&quot; {program.programCmd}" tools.atmelICE.program.extra_params="" tools.atmelICE.program.protocol="" tools.atmelICE.erase.params.verbose="-d3" tools.atmelICE.erase.params.quiet="-d0" tools.atmelICE.erase.pattern="" tools.jlink.cmd="arm-none-eabi-gdb.exe" tools.jlink.path="{runtime.tools.arm-none-eabi-gcc.path}/bin" tools.jlink.pattern="&quot;{path}/{cmd}&quot;" tools.jlink.vmserver.tool="vmopenocd" tools.jlink.debug.server="vmopenocd" tools.jlink.vmserver.boardCmd="-f &quot;interface/jlink.cfg&quot;" tools.jlink.vmserver.initCmd="-c &quot;init; reset halt&quot;" vs-cmd.Debug.AttachtoProcess.tools.jlink.vmserver.initCmd="-c &quot;init&quot;" tools.jlink.program.scriptPath="-s &quot;{program.path}/scripts/&quot;" tools.jlink.program.boardCmd="-f &quot;interface/jlink.cfg&quot;" tools.jlink.program.cmd="bin/openocd.exe" tools.jlink.program.cmd.windows="bin/openocd.exe" tools.jlink.program.path="{runtime.tools.openocd-0.10.0.20200213.path}" tools.jlink.program.address="localhost:3333" tools.jlink.program.params.verbose="-d2" tools.jlink.program.params.quiet="-d0" tools.jlink.program.elf.message="****[vMicro]**** Uploading ELF :" tools.jlink.program.pattern="&quot;{program.path}/{program.cmd}&quot; {program.verbose} {program.scriptPath} {program.boardCmd} {program.targetCmd} -c &quot;echo -n {{program.elf.message}}&quot; {program.programCmd}" tools.jlink.upload.scriptPath="-s &quot;{upload.path}/scripts/&quot;" tools.jlink.upload.boardCmd="-f &quot;interface/jlink.cfg&quot;" tools.jlink.upload.cmd="bin/openocd.exe" tools.jlink.upload.cmd.windows="bin/openocd.exe" tools.jlink.upload.path="{runtime.tools.openocd-0.10.0.20200213.path}" tools.jlink.upload.address="localhost:3333" tools.jlink.upload.params.verbose="-d2" tools.jlink.upload.params.quiet="-d0" tools.jlink.upload.elf.message="****[vMicro]**** Uploading ELF :" tools.jlink.upload.pattern="&quot;{upload.path}/{upload.cmd}&quot; {upload.verbose} {upload.scriptPath} {upload.boardCmd} {upload.targetCmd} -c &quot;echo -n {{upload.elf.message}}&quot; {upload.programCmd}" tools.bmp_upload.cmd="arm-none-eabi-gdb.exe" tools.bmp_upload.debug.path="{runtime.tools.arm-none-eabi-gcc.path}/bin/" tools.bmp_upload.program.cmd="bin/arm-none-eabi-gdb.exe" tools.bmp_upload.program.cmd.windows="bin/arm-none-eabi-gdb.exe" tools.bmp_upload.program.path="{runtime.tools.arm-none-eabi-gcc.path}" tools.bmp_upload.upload.cmd="bin/arm-none-eabi-gdb.exe" tools.bmp_upload.upload.cmd.windows="bin/arm-none-eabi-gdb.exe" tools.bmp_upload.upload.path="{runtime.tools.arm-none-eabi-gcc.path}" tools.bmp_upload.vmserver.initCmd="-c &quot;init; reset halt&quot;" vs-cmd.Debug.AttachtoProcess.tools.bmp_upload.vmserver.initCmd="-c &quot;init&quot;" tools.bmp_upload.showLocalSerialPort="true" tools.bmp_upload.debug.server="" tools.stlinkv2.description="" tools.stlinkv2.cmd="arm-none-eabi-gdb.exe" tools.stlinkv2.path="{runtime.tools.arm-none-eabi-gcc.path}/bin" tools.stlinkv2.pattern="&quot;{path}/{cmd}&quot;" tools.stlinkv2.vmserver.tool="vmopenocd" tools.stlinkv2.debug.server="vmopenocd" tools.stlinkv2.vmserver.boardCmd="-f &quot;interface/stlink.cfg&quot;" tools.stlinkv2.vmserver.initCmd="-c &quot;init; reset halt&quot;" vs-cmd.Debug.AttachtoProcess.tools.stlinkv2.vmserver.initCmd="-c &quot;init&quot;" tools.stlinkv2.upload.scriptPath="-s &quot;{upload.path}/scripts/&quot;" tools.stlinkv2.upload.boardCmd="-f &quot;interface/stlink.cfg&quot;" tools.stlinkv2.upload.cmd="bin/openocd.exe" tools.stlinkv2.upload.cmd.windows="bin/openocd.exe" tools.stlinkv2.upload.path="{runtime.tools.openocd-0.10.0.20200213.path}" tools.stlinkv2.upload.address="localhost:3333" tools.stlinkv2.upload.params.verbose="-d2" tools.stlinkv2.upload.params.quiet="-d0" tools.stlinkv2.upload.elf.message="****[vMicro]**** Uploading ELF :" tools.stlinkv2.upload.pattern="&quot;{upload.path}/{upload.cmd}&quot; {upload.verbose} {upload.scriptPath} {upload.boardCmd} {upload.targetCmd} -c &quot;echo -n {{upload.elf.message}}&quot; {upload.programCmd}" tools.stlinkv2.upload.extra_params="" tools.stlinkv2.upload.protocol="" tools.stlinkv2.protocol="" tools.f2232mm.cmd="arm-none-eabi-gdb.exe" tools.f2232mm.path="{runtime.tools.arm-none-eabi-gcc.path}/bin" tools.f2232mm.pattern="&quot;{path}/{cmd}&quot; {args}" tools.f2232mm.vmserver.tool="vmopenocd" tools.f2232mm.debug.server="vmopenocd" tools.f2232mm.vmserver.boardCmd="-f &quot;interface/ftdi/minimodule.cfg&quot;" tools.f2232mm.vmserver.initCmd="-c &quot;init; reset halt&quot;" vs-cmd.Debug.AttachtoProcess.tools.f2232mm.vmserver.initCmd="-c &quot;init&quot;" tools.f2232mm.upload.scriptPath="-s &quot;{upload.path}/scripts/&quot;" tools.f2232mm.upload.boardCmd="-f &quot;interface/ftdi/minimodule.cfg&quot;" tools.f2232mm.upload.cmd="bin/openocd.exe" tools.f2232mm.upload.cmd.windows="bin/openocd.exe" tools.f2232mm.upload.path="{runtime.tools.openocd-0.10.0.20200213.path}" tools.f2232mm.upload.address="localhost:3333" tools.f2232mm.upload.params.verbose="-d2" tools.f2232mm.upload.params.quiet="-d0" tools.f2232mm.upload.elf.message="****[vMicro]**** Uploading ELF :" tools.f2232mm.upload.pattern="&quot;{upload.path}/{upload.cmd}&quot; {upload.verbose} {upload.scriptPath} {upload.boardCmd} {upload.targetCmd} -c &quot;echo -n {{upload.elf.message}}&quot; {upload.programCmd}" tools.f2232mm.upload.extra_params="" tools.f2232mm.upload.protocol="" tools.f2232mm.protocol="" tools.f2232h.vmserver.boardCmd="-f &quot;interface/ftdi/minimodule-lowcost.cfg&quot;" tools.f2232h.cmd="arm-none-eabi-gdb.exe" tools.f2232h.path="{runtime.tools.arm-none-eabi-gcc.path}/bin" tools.f2232h.pattern="&quot;{path}/{cmd}&quot;" tools.f2232h.vmserver.tool="vmopenocd" tools.f2232h.debug.server="vmopenocd" tools.f2232h.vmserver.initCmd="-c &quot;init; reset halt&quot;" vs-cmd.Debug.AttachtoProcess.tools.f2232h.vmserver.initCmd="-c &quot;init&quot;" tools.f2232h.upload.scriptPath="-s &quot;{upload.path}/scripts/&quot;" tools.f2232h.upload.boardCmd="-f &quot;interface/ftdi/minimodule-lowcost.cfg&quot;" tools.f2232h.upload.cmd="bin/openocd.exe" tools.f2232h.upload.cmd.windows="bin/openocd.exe" tools.f2232h.upload.path="{runtime.tools.openocd-0.10.0.20200213.path}" tools.f2232h.upload.address="localhost:3333" tools.f2232h.upload.params.verbose="-d2" tools.f2232h.upload.params.quiet="-d0" tools.f2232h.upload.elf.message="****[vMicro]**** Uploading ELF :" tools.f2232h.upload.pattern="&quot;{upload.path}/{upload.cmd}&quot; {upload.verbose} {upload.scriptPath} {upload.boardCmd} {upload.targetCmd} -c &quot;echo -n {{upload.elf.message}}&quot; {upload.programCmd}" tools.f2232h.upload.extra_params="" tools.f2232h.upload.protocol="" tools.f2232h.protocol="" tools.cjmcuf2232h.vmserver.boardCmd="-f &quot;interface/ftdi/um232h.cfg&quot;" tools.cjmcuf2232h.cmd="arm-none-eabi-gdb.exe" tools.cjmcuf2232h.path="{runtime.tools.arm-none-eabi-gcc.path}/bin" tools.cjmcuf2232h.pattern="&quot;{path}/{cmd}&quot;" tools.cjmcuf2232h.vmserver.tool="vmopenocd" tools.cjmcuf2232h.debug.server="vmopenocd" tools.cjmcuf2232h.vmserver.initCmd="-c &quot;init; reset halt&quot;" vs-cmd.Debug.AttachtoProcess.tools.cjmcuf2232h.vmserver.initCmd="-c &quot;init&quot;" tools.cjmcuf2232h.upload.scriptPath="-s &quot;{upload.path}/scripts/&quot;" tools.cjmcuf2232h.upload.boardCmd="-f &quot;interface/ftdi/minimodule-lowcost.cfg&quot;" tools.cjmcuf2232h.upload.cmd="bin/openocd.exe" tools.cjmcuf2232h.upload.cmd.windows="bin/openocd.exe" tools.cjmcuf2232h.upload.path="{runtime.tools.openocd-0.10.0.20200213.path}" tools.cjmcuf2232h.upload.address="localhost:3333" tools.cjmcuf2232h.upload.params.verbose="-d2" tools.cjmcuf2232h.upload.params.quiet="-d0" tools.cjmcuf2232h.upload.elf.message="****[vMicro]**** Uploading ELF :" tools.cjmcuf2232h.upload.pattern="&quot;{upload.path}/{upload.cmd}&quot; {upload.verbose} {upload.scriptPath} {upload.boardCmd} {upload.targetCmd} -c &quot;echo -n {{upload.elf.message}}&quot; {upload.programCmd}" tools.cjmcuf2232h.upload.extra_params="" tools.cjmcuf2232h.upload.protocol="" tools.cjmcuf2232h.protocol="" tools.daplink.vmserver.boardCmd="-f &quot;interface/cmsis-dap.cfg&quot; -c &quot;adapter speed 1000&quot;" tools.daplink.cmd="arm-none-eabi-gdb.exe" tools.daplink.path="{runtime.tools.arm-none-eabi-gcc.path}/bin" tools.daplink.pattern="&quot;{path}/{cmd}&quot; {args}" tools.daplink.vmserver.tool="vmopenocd" tools.daplink.debug.server="vmopenocd" tools.daplink.vmserver.initCmd="-c &quot;init; reset halt&quot;" vs-cmd.Debug.AttachtoProcess.tools.daplink.vmserver.initCmd="-c &quot;init&quot;" tools.daplink.upload.scriptPath="-s &quot;{upload.path}/scripts/&quot;" tools.daplink.upload.boardCmd="-f &quot;interface/cmsis-dap.cfg&quot; -c &quot;adapter speed 1000&quot;" tools.daplink.upload.cmd="bin/openocd.exe" tools.daplink.upload.cmd.windows="bin/openocd.exe" tools.daplink.upload.path="{runtime.tools.openocd-0.10.0.20200213.path}" tools.daplink.upload.address="localhost:3333" tools.daplink.upload.params.verbose="-d2" tools.daplink.upload.params.quiet="-d0" tools.daplink.upload.elf.message="****[vMicro]**** Uploading ELF :" tools.daplink.upload.pattern="&quot;{upload.path}/{upload.cmd}&quot; {upload.verbose} {upload.scriptPath} {upload.boardCmd} {upload.targetCmd} -c &quot;echo -n {{upload.elf.message}}&quot; {upload.programCmd}" tools.daplink.upload.extra_params="" tools.daplink.upload.protocol="" tools.daplink.protocol="" runtime.tools.avr-gcc.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7" runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino7.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7" runtime.tools.avrdude.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\arduino\tools\avrdude\6.3.0-arduino17" runtime.tools.avrdude-6.3.0-arduino17.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\arduino\tools\avrdude\6.3.0-arduino17" runtime.tools.arduinoOTA.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\arduino\tools\arduinoOTA\1.3.0" runtime.tools.arduinoOTA-1.3.0.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\arduino\tools\arduinoOTA\1.3.0" runtime.tools.ctags.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\builtin\tools\ctags\5.8-arduino11" runtime.tools.ctags-5.8-arduino11.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\builtin\tools\ctags\5.8-arduino11" runtime.tools.dfu-discovery.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\builtin\tools\dfu-discovery\0.1.2" runtime.tools.dfu-discovery-0.1.2.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\builtin\tools\dfu-discovery\0.1.2" runtime.tools.esptool_py.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\esp32\tools\esptool_py\3.1.0" runtime.tools.esptool_py-3.1.0.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\esp32\tools\esptool_py\3.1.0" runtime.tools.mdns-discovery.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\builtin\tools\mdns-discovery\1.0.9" runtime.tools.mdns-discovery-1.0.9.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\builtin\tools\mdns-discovery\1.0.9" runtime.tools.mklittlefs.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\esp32\tools\mklittlefs\3.0.0-gnu12-dc7f933" runtime.tools.mklittlefs-3.0.0-gnu12-dc7f933.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\esp32\tools\mklittlefs\3.0.0-gnu12-dc7f933" runtime.tools.mkspiffs.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\esp32\tools\mkspiffs\0.2.3" runtime.tools.mkspiffs-0.2.3.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\esp32\tools\mkspiffs\0.2.3" runtime.tools.riscv32-esp-elf-gcc.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\esp32\tools\riscv32-esp-elf-gcc\gcc8_4_0-esp-2021r2" runtime.tools.riscv32-esp-elf-gcc-gcc8_4_0-esp-2021r2.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\esp32\tools\riscv32-esp-elf-gcc\gcc8_4_0-esp-2021r2" runtime.tools.serial-discovery.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\builtin\tools\serial-discovery\1.4.0" runtime.tools.serial-discovery-1.4.0.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\builtin\tools\serial-discovery\1.4.0" runtime.tools.serial-monitor.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\builtin\tools\serial-monitor\0.13.0" runtime.tools.serial-monitor-0.13.0.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\builtin\tools\serial-monitor\0.13.0" runtime.tools.xtensa-esp32-elf-gcc.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\esp32\tools\xtensa-esp32-elf-gcc\gcc8_4_0-esp-2021r2" runtime.tools.xtensa-esp32-elf-gcc-gcc8_4_0-esp-2021r2.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\esp32\tools\xtensa-esp32-elf-gcc\gcc8_4_0-esp-2021r2" runtime.tools.xtensa-esp32s2-elf-gcc.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\esp32\tools\xtensa-esp32s2-elf-gcc\gcc8_4_0-esp-2021r2" runtime.tools.xtensa-esp32s2-elf-gcc-gcc8_4_0-esp-2021r2.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\esp32\tools\xtensa-esp32s2-elf-gcc\gcc8_4_0-esp-2021r2" upload.maximum_size="30720" upload.maximum_data_size="2048" upload.speed="57600" bootloader.low_fuses="0xFF" bootloader.high_fuses="0xDA" bootloader.extended_fuses="0xFD" bootloader.file="atmega/ATmegaBOOT_168_atmega328.hex" build.mcu="atmega328p" runtime.vm.boardinfo.id="nano_atmega328old" ide.arduino2.enabled="true" ide.hint="Arduino IDE 2x is similar to Arduino 1x. Use Board and Library Manager to install default hardware and libraries." ide.location.key="visualmicro" ide.location.ide.auto="true" ide.location.ide.winreg="Arduino Default Alt Application" ide.location.sketchbook.winreg="Arduino Default Alt Sketchbook" ide.auto_fill_default_package_urls="" ide.default.revision_name="1.8.13" ide.contributions.boards.allow="true" ide.platforms.basedon="arduino16x" ide.inherit="arduino16x" ide.location.preferences="%VM_APPDATA_LOCAL%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.contributions="%VM_APPDATA_LOCAL%\arduino15" ide.location.contributions_fallback="%VM_APPDATA_ROAMING%\arduino15" ide.location.builtin.libraries="{ide.location.contributions}\libraries" ide.platformswithoutpackage="false" ide.contributions.boards.ignore_unless_rewrite_found="true" ide.contributions.libraries.allow="true" ide.contributions.boards.support.urls.wiki="https://github.com/arduino/Arduino/wiki/Unofficial-list-of-3rd-party-boards-support-urls" ide.create_platforms_from_boardsTXT.teensy="build.core" vm.debug="true" software="ARDUINO" ssh.user.name="root" ssh.user.default.password="arduino" ssh.host.wwwfiles.path="/www/sd" ide.exe="" build.working_directory="" ide.appid="arduino20x" ide.location.sketchbook.preferences="sketchbook.path" ide.default.version="10800" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="Arduino.h" ide.exe_name="arduino" ide.recipe.preproc.defines.flags="-w -x c++ -E -dM" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="160" ide.builder.exe="arduinobuilder.exe" ide.builder.name="Arduino Builder" ide.hosts="atmel" ide.url="https://www.visualmicro.com/page/Download-Arduino-Or-Other-Supporting-IDEs.aspx" ide.help.reference.path="reference" ide.help.reference.path2="reference\www.arduino.cc\en\Reference" ide.help.reference.serial="reference\www.arduino.cc\en\Serial" ide.location.preferences.portable="{runtime.ide.path}\portable" ide.location.preferences.arduinoData="{runtime.sketchbook.path}\ArduinoData" runtime.tools.vm_web_debugger.path="{vm.platform.root.path}/../../Micro Debuggers/WebDebugger" recipe.hooks.vmdeploy.vm_web_debugger_postupload.1.pattern="&quot;{runtime.tools.vm_web_debugger.path}/DeployMicroWebserver.exe&quot; &quot;{sketch_path}&quot; &quot;{serial.port}&quot; &quot;{runtime.hardware.path}\..&quot;" recipe.hooks.vmlaunch.vm_web_debugger_preopen.1.pattern="notepad.exe &quot;{sketch_path}\__vm\vmWebDebugger\Start-WebServer.bat&quot;" recipe.hooks.vmlaunch.vm_web_debugger_preopen.2.pattern="{sketch_path}\__vm\vmWebDebugger\Start-WebServer.bat" ide.debug_menu.debugger_type="Debug" ide.debug_menu.debugger_type.none="Off" ide.debug_menu.none.debug.tool="no_debug" ide.debug_menu.debugger_type.universal="Serial" ide.debug_menu.universal.debug.tool="universal" ide.debug_menu.debugger_type.hwdebugger="Hardware" ide.debug_menu.hwdebugger="Debugger" ide.debug_menu.hwdebugger.custom_debugger="Manual/Custom" ide.debug_menu.hwdebugger.custom_debugger.debug.tool="dbg_external" ide.meta_custom_debugger.sentence="Provides a build that includes debug defines and will launch a custom debugger if one is provided." ide.meta_custom_debugger.paragraph="This is option is for advanced use. It is recommended that a pre-configured debugger be selected when available in this list. Usage: Optionally add a customer debugger to the project. A 'debugger_launch.json' file shares the same command syntax that is used by the VsCode debugger. Custom debuggers can be targeted at a board and/or variant and/or configuration name. IE: [variant].[configuration_name][.]debugger_launch.json" ide.meta_custom_debugger.reference.usage.url="https://github.com/Microsoft/vscode-cpptools/blob/master/launch.md#customlaunchsetupcommands" ide.meta_custom_debugger.reference.connect.url="https://docs.microsoft.com/en-us/visualstudio/debugger/create-custom-views-of-native-objects?view=vs-2019" ide.debug_menu.vm_disable_optimization="Disable Optimization" ide.debug_menu.vm_disable_optimization.vm_disable_opt_default="Default Optimization" ide.debug_menu.vm_disable_optimization.vm_disable_opt_proj="No Project  Optimization" ide.debug_menu.vm_disable_opt_proj.vm_disable_opt_project="{ide.compiler_flags_no_opt}" ide.debug_menu.vm_disable_optimization.vm_disable_opt_proj_libs="No Project + Libraries Optimization" ide.debug_menu.vm_disable_opt_proj_libs.vm_disable_opt_project="{ide.compiler_flags_no_opt}" ide.debug_menu.vm_disable_opt_proj_libs.vm_disable_opt_libraries="{ide.compiler_flags_no_opt}" ide.debug_menu.vm_disable_optimization.vm_disable_opt_all="No Optimization" ide.meta_vm_disable_opt_all.sentence="Disable compiler optimization for all sources:- Project, Library and Platform." ide.meta_vm_disable_opt_all.comment="After switching between 'No Optimization' and other optimization values, please click &quot;Solution Clean&quot; or switch off (or cycle) 'vMicro&gt;Compiler&gt;Shared Cache For Cores'. NOTE: Changing optimization settings can cause build errors or result in overly large programs." ide.debug_menu.vm_disable_opt_all.vm_disable_opt_project="{ide.compiler_flags_no_opt}" ide.debug_menu.vm_disable_opt_all.vm_disable_opt_libraries="{ide.compiler_flags_no_opt}" ide.debug_menu.vm_disable_opt_all.vm_disable_opt_core="{ide.compiler_flags_no_opt}" vm.arduino2.settings.dirs.builtin="C:\Users\xmisko06\AppData\Local\Arduino15\packages/builtin" vm.arduino2.settings.dirs.download="C:\Users\xmisko06\AppData\Local\Arduino15\staging" vm.arduino2.settings.dirs.sketchbook="C:\Users\xmisko06\Documents\Arduino" vm.arduino2.location.sketchbook="C:\Users\xmisko06\Documents\Arduino" location.sketchbook="C:\Users\xmisko06\Documents\Arduino" vm.resolved.location.builtin.libraries="C:\Users\xmisko06\AppData\Local\\arduino15\\libraries" runtime.vm.boardinfo.name="nano_atmega328old" runtime.vm.boardinfo.desc="ATmega328P (Old Bootloader) (Arduino Nano)                                                                 (nano_atmega328old)" runtime.vm.boardinfo.src_location="C:\Users\xmisko06\AppData\Local\Arduino15\packages\arduino\hardware\avr\1.8.6" build.core.vmresolved="C:\Users\xmisko06\AppData\Local\Arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino" build.core.parentfolder.vmresolved="C:\Users\xmisko06\AppData\Local\Arduino15\packages\arduino\hardware\avr\1.8.6\cores" build.core.coresparentfolder.vmresolved="C:\Users\xmisko06\AppData\Local\Arduino15\packages\arduino\hardware\avr\1.8.6" build.core.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\arduino\hardware\avr\1.8.6\cores\arduino" vm.core.include="arduino.h" vm.boardsource.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\arduino\hardware\avr\1.8.6" runtime.platform.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\arduino\hardware\avr\1.8.6" vm.platformname.name="avr" build.arch="AVR" vm.runtime.compiler.cached_cores_path="C:\Users\xmisko06\AppData\Local\Temp\VMBCore\arduino20x" vm.runtime.compiler.showwarnings="false" vm.runtime.compiler.showwarnings_core="false" vm.runtime.compiler.showwarnings_library="false" vm.runtime.upload.verbose="false" vm.runtime.upload.verify="false" runtime.vm.ide.platforms.path="c:\program files\microsoft visual studio\2022\enterprise\common7\ide\extensions\lurodfxk.kwv\Micro Platforms" runtime.vm.ide.tools.openocd.path="{runtime.tools.openocd-0.9.0.path}" runtime.vm.openocd.path="{runtime.tools.openocd-0.9.0.path}" vm.runtime.build.intermediate_output_enabled="false" compiler.always_include_sketchfolder="true" compiler.always_include_sharedprojectfolders="true" vm.runtime.compiler.auto_discover_includes="true" vm.runtime.compiler.auto_discover_includes_shallow="true" vm.runtime.compiler.allow_library_debugging="false" vm.sketch_ino_cpp_name="Driver.cpp" serial.port.file="COM13" serial.port="COM13" serial.port.num="13" port.caption="COM13 - USB-SERIAL CH340" Caption="USB-SERIAL CH340 (COM13)" ClassGuid="{4d36e978-e325-11ce-bfc1-08002be10318}" CompatibleID.value0="USB\Class_FF" ConfigManagerErrorCode="0" ConfigManagerUserConfig="False" CreationClassName="Win32_PnPEntity" Description="USB-SERIAL CH340" DeviceID="USB\VID_1A86&amp;PID_7523\7&amp;3B30E3F6&amp;0&amp;1" HardwareID.value0="USB\VID_1A86&amp;PID_7523" Manufacturer="wch.cn" Name="USB-SERIAL CH340 (COM13)" PNPClass="Ports" PNPDeviceID="USB\VID_1A86&amp;PID_7523\7&amp;3B30E3F6&amp;0&amp;1" Present="True" Service="CH341SER_A64" Status="OK" SystemCreationClassName="Win32_ComputerSystem" SystemName="A04-0632A" vid="0x1A86" pid="0x7523" vidpid="1A867523" vid_pid="0x1A86_0x7523" iserial="7&amp;3B30E3F6&amp;0&amp;1" extra.time.local="1691572845" extra.time.utc="1691565645" extra.time.dst="7200" extra.time.zone="-7200" serial.port.caption="COM13 - USB-SERIAL CH340" serial.Caption="USB-SERIAL CH340 (COM13)" serial.ClassGuid="{4d36e978-e325-11ce-bfc1-08002be10318}" serial.CompatibleID.value0="USB\Class_FF" serial.ConfigManagerErrorCode="0" serial.ConfigManagerUserConfig="False" serial.CreationClassName="Win32_PnPEntity" serial.Description="USB-SERIAL CH340" serial.DeviceID="USB\VID_1A86&amp;PID_7523\7&amp;3B30E3F6&amp;0&amp;1" serial.HardwareID.value0="USB\VID_1A86&amp;PID_7523" serial.Manufacturer="wch.cn" serial.Name="USB-SERIAL CH340 (COM13)" serial.PNPClass="Ports" serial.PNPDeviceID="USB\VID_1A86&amp;PID_7523\7&amp;3B30E3F6&amp;0&amp;1" serial.Present="True" serial.Service="CH341SER_A64" serial.Status="OK" serial.SystemCreationClassName="Win32_ComputerSystem" serial.SystemName="A04-0632A" serial.vid="0x1A86" serial.pid="0x7523" serial.vidpid="1A867523" serial.vid_pid="0x1A86_0x7523" serial.iserial="7&amp;3B30E3F6&amp;0&amp;1" serial.port.iserial="7&amp;3B30E3F6&amp;0&amp;1" build.project_name="Driver.ino" build.project_path="C:\Users\xmisko06\Documents\GitHub\Bakalarka_robot\CodeReworking\Driver" sketch_path="C:\Users\xmisko06\Documents\GitHub\Bakalarka_robot\CodeReworking\Driver" ProjectDir="C:\Users\xmisko06\Documents\GitHub\Bakalarka_robot\CodeReworking\Driver\" build.path="C:\Users\xmisko06\AppData\Local\Temp\VMBuilds\Driver\nano_atmega328old\Debug" vm.runtime.compile.skip_library_file_if_exists_in_project="false" vm.runtime.compiler.auto_discover_includes_cache="true" debug.tool="universal" build.architecture="7.3.0-atmel3.6.1-arduino7" vmresolved.compiler.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\bin\" vmresolved.tools.path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7" build.vm.build.vmdebug="1" build.vm.build.isgdb="0" build.vm.build.optimised="1" vm.last.buildpath="C:\Users\xmisko06\AppData\Local\Temp\VMBuilds\Driver\nano_atmega328old\Debug" build.variant.vmresolved.name="eightanaloginputs" build.variant.vmresolved.full_path="C:\Users\xmisko06\AppData\Local\Arduino15\packages\arduino\hardware\avr\1.8.6\variants\eightanaloginputs" />
    </Platform>
    <Debug DebugEnabled="1" EnableBreak="0" InBreakLiveView="1" PerfStats="1" IsGdb="0" RuntimeWriterMissingSetup="0" RuntimeWriterMissingLoop="0" RemotePortSpeedWrittenToDebugSource="115200" RuntimeWriterFoundSetupStart="1" RuntimeWriterFoundLoopStart="1" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="SerialControl.cpp, line 18" Id="9eb6a8a9-837a-4e18-8839-8c41b13ce87e" Enabled="0" Message="{State.actualRealSpeed[0]} {State.actualRealSpeed[1]} {State.motor1DeadBandReal[0]} {State.motor2DeadBandReal[0]}" MessageTextType="2" PreProcessedMessage="{0} {1} {2} {3}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\xmisko06\documents\github\bakalarka_robot\codereworking\driver\serialcontrol.cpp" FileLine="18" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='9eb6a8a9-837a-4e18-8839-8c41b13ce87e'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>11	
12	void SerialControlClass::init()
13	{
14	
15	}
16	
17	void SerialControlClass::loop()
--&gt;18	{
19	   //Serial.print(String(State.actualRealSpeed[0]) + " " + String(State.actualRealSpeed[1]) + " " + String(State.motor1DeadBandReal[0]) + " " + String(State.motor2DeadBandReal[0]));
20	   //Serial.println();
21	    if (State.state_commPrev != State.state_comm)
22	        State.state_commPrev = State.state_comm;
23	    if (Serial.available() &gt; 0) {
24	        SerialString = Serial.readStringUntil('\n');
25	        SerialInt = SerialString.toInt();
26	        SerialFloat = SerialString.toFloat();
27	
</Source>
        <MessageVariables>
          <MessageVariable Name="State.actualRealSpeed[0]" Index="1" />
          <MessageVariable Name="State.actualRealSpeed[1]" Index="2" />
          <MessageVariable Name="State.motor1DeadBandReal[0]" Index="3" />
          <MessageVariable Name="State.motor2DeadBandReal[0]" Index="4" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="2" Name="Drive.cpp, line 78" Id="a2fa2499-38e9-4604-a76a-d2b198663a33" Enabled="0" Message="Ramp update required: {State.requiredSpeed[motSelect]}" MessageTextType="0" PreProcessedMessage="Ramp update required: {0}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\xmisko06\documents\github\bakalarka_robot\codereworking\driver\drive.cpp" FileLine="78" FileColumn="1" FunctionName="rampUpdate(bool motSelect, int increment, bool optim)" FunctionLineOffset="7" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='a2fa2499-38e9-4604-a76a-d2b198663a33'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>71	void DriveClass::rampUpdate(bool motSelect, int increment, bool optim)
72	{
73	    if (!rampInitDone[motSelect] || !increment) return;
74	
75	    Timer_ramp[motSelect]-&gt;update();
76	    if (Timer_ramp[motSelect]-&gt;isStopped()) {
77	        Timer_ramp[motSelect]-&gt;start();
--&gt;78	        State.requiredSpeed[motSelect] += increment;
79	        if (optim) {
80	            //Serial.println("rs: " + String(State.requiredSpeed[motSelect]) + " aENCs: " + String(State.actualEncSpeed[motSelect]));
81	            if (abs(State.requiredSpeed[motSelect]) &gt; optimizedSpd.zeroPWM &amp;&amp; abs(State.requiredSpeed[motSelect]) &lt; 50 &amp;&amp; State.actualEncSpeed[motSelect] == 0 &amp;&amp; ((increment &gt; 0 &amp;&amp; State.requiredSpeed[motSelect] &gt; 0)||(increment &lt; 0 &amp;&amp; State.requiredSpeed[motSelect] &lt; 0)) &amp;&amp; true) {
82	                Serial.println("Done IF");
83	                requiredSpdOLD = State.requiredSpeed[motSelect];
84	                while (!AccFromZero((!motSelect) ? sign(State.requiredSpeed[motSelect]) : 0, (motSelect) ? sign(State.requiredSpeed[motSelect]) : 0)) {
85	                    read();
86	                    Serial.println("Doing Acc");
87	                }
</Source>
        <MessageVariables>
          <MessageVariable Name="State.requiredSpeed[motSelect]" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="3" Name="Drive.cpp, line 132" Id="ecf08867-3e54-4550-901c-961fa92c5579" Enabled="0" Message="{State.actualRealSpeed[motSelect]} {motSelect}" MessageTextType="2" PreProcessedMessage="{0} {1}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\xmisko06\documents\github\bakalarka_robot\codereworking\driver\drive.cpp" FileLine="132" FileColumn="1" FunctionName="DeccTillRotating_update(bool motSelect, unsigned int decrement, unsigned int endSpeed = 0)" FunctionLineOffset="2" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='ecf08867-3e54-4550-901c-961fa92c5579'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>125	    rampInit(motSelect, timeSlope, State.actualSpeed[motSelect]);
126	    deccTillRotatingDone[motSelect] = false;
127	}
128	
129	int oldSpd[2] = { 0,0 };
130	bool DriveClass::DeccTillRotating_update(bool motSelect, unsigned int decrement, unsigned int endSpeed = 0)
131	{
--&gt;132	    if (!deccTillRotatingDone[motSelect]) {
133	        if (State.actualEncSpeed[motSelect] &gt; endSpeed) {
134	            rampUpdate(motSelect, -1*sign(State.actualSpeed[motSelect])*decrement);
135	            oldSpd[motSelect] = State.actualEncSpeed[motSelect];
136	        }
137	        else {
138	            State.motor2DeadBandPWM[motSelect] = State.actualSpeed[motSelect];
139	            State.motor2DeadBandReal[motSelect] = oldSpd[motSelect];
140	            rampInitDone[motSelect] = false;
141	            deccTillRotatingDone[motSelect] = true;
</Source>
        <MessageVariables>
          <MessageVariable Name="State.actualRealSpeed[motSelect]" Index="1" />
          <MessageVariable Name="motSelect" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="4" Name="Drive.cpp, line 25" Id="ec055aa7-9538-46a0-ac0e-2a771aefb024" Enabled="0" Message="{currentTime - previousTime}" MessageTextType="2" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\xmisko06\documents\github\bakalarka_robot\codereworking\driver\drive.cpp" FileLine="25" FileColumn="1" FunctionName="read()" FunctionLineOffset="2" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='ec055aa7-9538-46a0-ac0e-2a771aefb024'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>18	    pid1.SetOutputLimits(-PWMtoOptimizedPWM(maxSpeed), PWMtoOptimizedPWM(maxSpeed)); //Set max output of PID action
19	
20	    pid2.SetMode(AUTOMATIC);
21	    pid2.SetOutputLimits(-PWMtoOptimizedPWM(maxSpeed), PWMtoOptimizedPWM(maxSpeed)); //Set max output of PID action
22	}
23	void DriveClass::read()
24	{
--&gt;25	    currentTime = micros();
26	    if ((currentTime - previousTime) &gt;= TimerSpeedDelay_uS) {
27	        State.readSpeed = currentTime - previousTime; //Save reading speed
28	
29	        State.actualEncSpeed[0] = enc1.readAndReset();
30	        State.actualEncSpeed[1] = enc2.readAndReset();
31	        //Serial.println("$" + String(millis()) + " " + String(State.actualEncSpeed[0]) + " " + String(State.actualSpeed[0]) + "; ");
32	        pid_In1 = State.actualEncSpeed[0];
33	        pid_Set1 = State.requiredEncSpeed[0];
34	        pid1.Compute();
</Source>
        <MessageVariables>
          <MessageVariable Name="currentTime - previousTime" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="5" Name="Drive.cpp, line 33" Id="fafa95c4-a5f1-4414-ab82-fbe9903e1ac5" Enabled="0" Message="{currentTime - previousTime} {State.actualEncSpeed[1]} {State.actualEncSpeed[0]} {State.actualSpeed[0]} {State.actualSpeed[1]} {State.Kp_1} {State.Ki_1} {State.Kd_1}" MessageTextType="0" PreProcessedMessage="{0} {1} {2} {3} {4} {5} {6} {7}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\xmisko06\documents\github\bakalarka_robot\codereworking\driver\drive.cpp" FileLine="33" FileColumn="1" FunctionName="read()" FunctionLineOffset="10" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='fafa95c4-a5f1-4414-ab82-fbe9903e1ac5'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>26	    if ((currentTime - previousTime) &gt;= TimerSpeedDelay_uS) {
27	        State.readSpeed = currentTime - previousTime; //Save reading speed
28	
29	        State.actualEncSpeed[0] = enc1.readAndReset();
30	        State.actualEncSpeed[1] = enc2.readAndReset();
31	        //Serial.println("$" + String(millis()) + " " + String(State.actualEncSpeed[0]) + " " + String(State.actualSpeed[0]) + "; ");
32	        pid_In1 = State.actualEncSpeed[0];
--&gt;33	        pid_Set1 = State.requiredEncSpeed[0];
34	        pid1.Compute();
35	
36	        pid_In2 = State.actualEncSpeed[1];
37	        pid_Set2 = State.requiredEncSpeed[1];
38	        pid2.Compute();
39	
40	        previousTime = currentTime;
41	    }
42	}
</Source>
        <MessageVariables>
          <MessageVariable Name="currentTime - previousTime" Index="1" />
          <MessageVariable Name="State.actualEncSpeed[1]" Index="2" />
          <MessageVariable Name="State.actualEncSpeed[0]" Index="3" />
          <MessageVariable Name="State.actualSpeed[0]" Index="4" />
          <MessageVariable Name="State.actualSpeed[1]" Index="5" />
          <MessageVariable Name="State.Kp_1" Index="6" />
          <MessageVariable Name="State.Ki_1" Index="7" />
          <MessageVariable Name="State.Kd_1" Index="8" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="6" Name="Drive.cpp, line 63" Id="61e17f24-c969-4fb4-aad6-f7d819509706" Enabled="0" Message="{State.requiredSpeed[motSelect]}" MessageTextType="2" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\xmisko06\documents\github\bakalarka_robot\codereworking\driver\drive.cpp" FileLine="63" FileColumn="1" FunctionName="rampInit(bool motSelect, int timeSlope, int SpeedBegin, bool optim)" FunctionLineOffset="2" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='61e17f24-c969-4fb4-aad6-f7d819509706'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>56	    Timer_ramp[motSelect]-&gt;setTimeout(timeSlope);
57	    Timer_ramp[motSelect]-&gt;start();
58	    rampInitDone[motSelect] = true;
59	}
60	
61	void DriveClass::rampInit(bool motSelect, int timeSlope, int SpeedBegin, bool optim)
62	{
--&gt;63	    State.requiredSpeed[motSelect] = SpeedBegin; //= optim ? PWMtoOptimizedPWM(SpeedBegin, 3, 20) : SpeedBegin;
64	    //if (abs(State.requiredSpeed[motSelect]) &gt; 0 &amp;&amp; abs(State.requiredSpeed[motSelect]) &lt; 50 &amp;&amp; State.actualEncSpeed == 0) {
65	    //    while (!AccFromZero((!motSelect)? sign(State.requiredSpeed[motSelect]) : 0, (motSelect)? sign(State.requiredSpeed[motSelect]) : 0));
66	    //}
67	    Motors.SpeedSingle(motSelect, (optim ? PWMtoOptimizedPWM(State.requiredSpeed[motSelect]) : State.requiredSpeed[motSelect]));
68	    rampInit(motSelect, timeSlope);
69	}
70	int requiredSpdOLD = 0;
71	void DriveClass::rampUpdate(bool motSelect, int increment, bool optim)
72	{
</Source>
        <MessageVariables>
          <MessageVariable Name="State.requiredSpeed[motSelect]" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="7" Name="SerialControl.cpp, line 128" Id="90d1a3d7-f5cb-44b5-80a3-1ad6a3335333" Enabled="0" Message="enc1={State.actualEncSpeed[0]}, enc2={State.actualEncSpeed[1]}, {State.actualRealSpeed[0]} {State.actualRealSpeed[1]} {State.actualSpeed[0]} {State.actualSpeed[1]} {State.requiredEncSpeed[0]} {State.requiredEncSpeed[1]} {State.requiredRealSpeed[0]} {State.requiredRealSpeed[1]} {printState_comm} {static_cast&lt;int&gt;(State.state_comm)} {SerialString} {SerialInt} {State.Kp_1} {State.Ki_1} {State.Kd_1} {SerialFloat} {SerialModePrint[static_cast&lt;int&gt;(serialMode)]} {State.motor1DeadBandPWM[0]} {{State.motor2DeadBandPWM[0]}} {{State.motor1DeadBandReal[0]}} {{State.motor2DeadBandReal[0]}} {State.motor1DeadBandPWM[1]} {{State.motor2DeadBandPWM[1]}} {{State.motor1DeadBandReal[1]}} {{State.motor2DeadBandReal[1]}}" MessageTextType="0" PreProcessedMessage="enc1={0}, enc2={1}, {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12} {13} {14} {15} {16} {17} {18} {19} {{20}} {{21}} {{22}} {23} {{24}} {{25}} {{26}}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\xmisko06\documents\github\bakalarka_robot\codereworking\driver\serialcontrol.cpp" FileLine="128" FileColumn="1" FunctionName="loop()" FunctionLineOffset="111" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='90d1a3d7-f5cb-44b5-80a3-1ad6a3335333'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>121	            State.requiredSpeed[1] = speed;
122	            State.state_comm = State_comm::SpeedPWM; // need to asign State.state_comm for drive to catch the request for changing speed to required
123	            break;
124	        }
125	        default:
126	            break;
127	        }
--&gt;128	    } //here goes breakpoint when debugging - Actions: //enc1={State.encSpeed[0]}, enc2={State.encSpeed[1]}, {Drive.enc1.read()} {State.actualRealSpeed[0]} {State.actualRealSpeed[1]} {State.actualSpeed[0]} {State.actualSpeed[1]} {State.requiredSpeed[0]} {State.requiredSpeed[1]} {State.stateArr_comm[static_cast&lt;int&gt;(State.state_comm)]} {static_cast&lt;int&gt;(State.state_comm)} {SerialString} {SerialInt} {EnableSerialMode}
129	    //enc1={State.encSpeed[0]}, enc2={State.encSpeed[1]}, {State.actualRealSpeed[0]} {State.actualRealSpeed[1]} {State.actualSpeed[0]} {State.actualSpeed[1]} {State.requiredSpeed[0]} {State.requiredSpeed[1]} {State.requiredRealSpeed[0]} {State.requiredRealSpeed[1]} {State.stateArr_comm[static_cast&lt;int&gt;(State.state_comm)]} {static_cast&lt;int&gt;(State.state_comm)} {SerialString} {SerialInt} {State.Kp_1} {SerialFloat} {SerialModePrint[static_cast&lt;int&gt;(serialMode)]} {State.motor1DeadBand[0]}
130	}
131	SerialControlClass SerialControl{};
132	
</Source>
        <MessageVariables>
          <MessageVariable Name="State.actualEncSpeed[0]" Index="1" />
          <MessageVariable Name="State.actualEncSpeed[1]" Index="2" />
          <MessageVariable Name="State.actualRealSpeed[0]" Index="3" />
          <MessageVariable Name="State.actualRealSpeed[1]" Index="4" />
          <MessageVariable Name="State.actualSpeed[0]" Index="5" />
          <MessageVariable Name="State.actualSpeed[1]" Index="6" />
          <MessageVariable Name="State.requiredEncSpeed[0]" Index="7" />
          <MessageVariable Name="State.requiredEncSpeed[1]" Index="8" />
          <MessageVariable Name="State.requiredRealSpeed[0]" Index="9" />
          <MessageVariable Name="State.requiredRealSpeed[1]" Index="10" />
          <MessageVariable Name="printState_comm" Index="11" />
          <MessageVariable Name="static_cast&lt;int&gt;(State.state_comm)" Index="12" />
          <MessageVariable Name="SerialString" Index="13" />
          <MessageVariable Name="SerialInt" Index="14" />
          <MessageVariable Name="State.Kp_1" Index="15" />
          <MessageVariable Name="State.Ki_1" Index="16" />
          <MessageVariable Name="State.Kd_1" Index="17" />
          <MessageVariable Name="SerialFloat" Index="18" />
          <MessageVariable Name="SerialModePrint[static_cast&lt;int&gt;(serialMode)]" Index="19" />
          <MessageVariable Name="State.motor1DeadBandPWM[0]" Index="20" />
          <MessageVariable Name="State.motor2DeadBandPWM[0]" Index="21" />
          <MessageVariable Name="State.motor1DeadBandReal[0]" Index="22" />
          <MessageVariable Name="State.motor2DeadBandReal[0]" Index="23" />
          <MessageVariable Name="State.motor1DeadBandPWM[1]" Index="24" />
          <MessageVariable Name="State.motor2DeadBandPWM[1]" Index="25" />
          <MessageVariable Name="State.motor1DeadBandReal[1]" Index="26" />
          <MessageVariable Name="State.motor2DeadBandReal[1]" Index="27" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="8" Name="Drive.cpp, line 327" Id="c3362b3b-6d9d-435d-91c2-42bc3a048e81" Enabled="0" Message="{State.meas.motSelect} {static_cast&lt;int&gt;(State.meas.measType)} {State.meas.temp} {State.meas.motSelect}" MessageTextType="2" PreProcessedMessage="{0} {1} {2} {0}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\xmisko06\documents\github\bakalarka_robot\codereworking\driver\drive.cpp" FileLine="327" FileColumn="1" FunctionName="loop()" FunctionLineOffset="9" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='c3362b3b-6d9d-435d-91c2-42bc3a048e81'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>320	    //Serial.print(printState_ramp());
321	    //Serial.println(" accDone: " + String(accTillPWMDone[State.meas.motSelect]) + " deccDone: " + String(deccTillPWMDone[State.meas.motSelect]));
322	    //{printState_comm} {State.requiredSpeed[0]} {printState_commPrev}
323	    //Serial.println("comm"+String(printState_comm)+ "CommPrev:"+String(printState_commPrev));
324	    read(); //Update speed of motors - reads encoders and writes speed of motors to State variables
325	    //Serial.println(printState_accFZ());
326	    //Read from State.state_comm and determine in which state controller wants driver to be in
--&gt;327	    switch(State.state_comm){
328	    case State_comm::Stop:
329	        Motors.Stop();
330	        break;
331	    case State_comm::SpeedPWM: 
332	        Motors.Speed(State.requiredSpeed[0], State.requiredSpeed[1]);
333	        break;
334	    case State_comm::SpeedReal:
335	        if (!pid_In1 &amp;&amp; !pid_Set1) {
336	            pid1.SetMode(MANUAL);
</Source>
        <MessageVariables>
          <MessageVariable Name="State.meas.motSelect" Index="1" />
          <MessageVariable Name="static_cast&lt;int&gt;(State.meas.measType)" Index="2" />
          <MessageVariable Name="State.meas.temp" Index="3" />
          <MessageVariable Name="State.meas.motSelect" Index="4" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="9" Name="Drive.cpp, line 324" Id="d9d3c04d-7fc1-462c-ae01-aab4b795a00d" Enabled="0" Message="{printState_comm} {State.requiredSpeed[0]} {printState_commPrev}" MessageTextType="2" PreProcessedMessage="{0} {1} {2}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\xmisko06\documents\github\bakalarka_robot\codereworking\driver\drive.cpp" FileLine="324" FileColumn="1" FunctionName="loop()" FunctionLineOffset="6" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='d9d3c04d-7fc1-462c-ae01-aab4b795a00d'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>317	void DriveClass::loop()
318	{
319	    //Serial.println("$" + String(millis()) + " " + String(State.readSpeed) + ";");
320	    //Serial.print(printState_ramp());
321	    //Serial.println(" accDone: " + String(accTillPWMDone[State.meas.motSelect]) + " deccDone: " + String(deccTillPWMDone[State.meas.motSelect]));
322	    //{printState_comm} {State.requiredSpeed[0]} {printState_commPrev}
323	    //Serial.println("comm"+String(printState_comm)+ "CommPrev:"+String(printState_commPrev));
--&gt;324	    read(); //Update speed of motors - reads encoders and writes speed of motors to State variables
325	    //Serial.println(printState_accFZ());
326	    //Read from State.state_comm and determine in which state controller wants driver to be in
327	    switch(State.state_comm){
328	    case State_comm::Stop:
329	        Motors.Stop();
330	        break;
331	    case State_comm::SpeedPWM: 
332	        Motors.Speed(State.requiredSpeed[0], State.requiredSpeed[1]);
333	        break;
</Source>
        <MessageVariables>
          <MessageVariable Name="printState_comm" Index="1" />
          <MessageVariable Name="State.requiredSpeed[0]" Index="2" />
          <MessageVariable Name="printState_commPrev" Index="3" />
        </MessageVariables>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>